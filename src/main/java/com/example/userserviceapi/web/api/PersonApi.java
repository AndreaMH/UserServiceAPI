/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.userserviceapi.web.api;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.userserviceapi.web.api.model.ApiError;
import com.example.userserviceapi.web.api.model.People;
import com.example.userserviceapi.web.api.model.Person;
import com.example.userserviceapi.web.api.model.PersonResponse;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-09-25T10:13:35.563Z")

@Api(value = "person", description = "the person API")
@RequestMapping(value = "")
public interface PersonApi {

	@ApiOperation(value = "Insert person into database", nickname = "createPerson", notes = "", response = PersonResponse.class, tags = {
			"person", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "person created", response = PersonResponse.class),
			@ApiResponse(code = 401, message = "Invalid credentials provided", response = ApiError.class),
			@ApiResponse(code = 405, message = "Invalid input", response = ApiError.class),
			@ApiResponse(code = 406, message = "Method not allowed", response = ApiError.class),
			@ApiResponse(code = 500, message = "Server error", response = ApiError.class) })
	@RequestMapping(value = "/person", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<PersonResponse> createPerson(
			@ApiParam(value = "name and address", required = true) @Valid @RequestBody Person user);

	@ApiOperation(value = "Delete a user by name", nickname = "deletePersonByName", notes = "", response = PersonResponse.class, tags = {
			"person", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = PersonResponse.class) })
	@RequestMapping(value = "/person/name", produces = { "application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<PersonResponse> deletePersonByName();

	@ApiOperation(value = "Obtain users", nickname = "findAllPeople", notes = "", response = People.class, tags = {
			"person", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = People.class) })
	@RequestMapping(value = "/person", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<People> findAllPeople();

	@ApiOperation(value = "Obtain a user by name", nickname = "findPersonByName", notes = "", response = Person.class, tags = {
			"person", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Person.class) })
	@RequestMapping(value = "/person/name", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<Person> findPersonByName(
			@NotNull @ApiParam(value = "User's name", required = true) @Valid @RequestParam(value = "name", required = true) String name);

	@ApiOperation(value = "Update user", nickname = "updatePerson", notes = "", tags = { "person", })
	@ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid user supplied", response = ApiError.class),
			@ApiResponse(code = 404, message = "User not found", response = ApiError.class) })
	@RequestMapping(value = "/person/{name}", produces = { "application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Void> updatePerson(
			@ApiParam(value = "name that need to be updated", required = true) @PathVariable("name") String name,
			@ApiParam(value = "Updated user object", required = true) @Valid @RequestBody Person body);

}
